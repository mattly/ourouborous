# Ouroubourus

by Matthew Lyon <matt@flowerpowered.com>

## Description

Ouroubourus is a re-thinking of a MIDI sequencer system I built in Max/MSP several years ago and never got around to finishing.

## Features

Ouroubourus is made up of several components:

- The Scheduler:  
  This is currently a remote timer using Kernel#sleep. In the future it will also be able to subscribe to a network scheduler to syncronize multiple processes/computers to the same timer. It uses a time-independent "tick" system which works out to 480 pulses per quarter note at a given tempo, so you can specify durations in musical terms, not fractional seconds.
  
- Scheduler Subscribers:  
  Mixin `Ouroubourus::Schedulable` and your class will have its own event queue (`Ouroubourus::Schedule`) that can be driven by a scheduler when added to that scheduler's subscriptions.

- Sequencers:
  A base library of classes to use as a starting point. At this point there is only a simplistic Metronome.

- Effects:
  None yet. Modify your midi in real-time.

- Devices:
  None yet. A library for specifying specific behaviors with certain devices, like midi knob boxes or a monome.
  
# Synopsis

See the metronome example in `examples/metronome.rb`

## REQUIREMENTS

- The example provided requires Ben Bleything's [Midiator](http://rubyforge.org/projects/midiator)
- Network Time Syncing/Serving will require my own [Datagrammer](http://github.com/mattly/datagrammer)